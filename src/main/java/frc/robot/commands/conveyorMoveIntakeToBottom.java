// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import edu.wpi.first.hal.sim.mockdata.RoboRioDataJNI;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Robot;
import frc.robot.subsystems.RobotSensors;

/**
 *
 */
public class conveyorMoveIntakeToBottom extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private boolean firstTime = true;
    private boolean waitForReleased = false;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public conveyorMoveIntakeToBottom() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.conveyor);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        if (Robot.robotSensors.isBottomInRange()) {
            waitForReleased = true;
        }
        // firstTime = true;
        // bottomReleased = !Robot.robotSensors.isBottomInRange();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        if (!Robot.robotSensors.isTopInRange()) {
            Robot.conveyor.move(Robot.oi.getConveyorInput());
        }
        
        
        /*
        if (Robot.robotSensors.isIntakeInRange() &&
            !Robot.robotSensors.isTopInRange()) {
        //if (RobotSensors.INTAKE_STATE == RobotSensors.kInRange &&                       // There must be a power cell in the intake ready to load into magazine
        //    RobotSensors.TOP_STATE == RobotSensors.kEmpty) {                             // There cannot be a power cell in the top of the magazine (JAM might occur)
                Robot.conveyor.move(Robot.oi.getConveyorInput());                           // There are two spaces for balls outside of the sensor space
        }
        */
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        // if (Robot.conveyor.isPowerCellInBottomPosition()) return true;
        if (waitForReleased) {

            if (!Robot.robotSensors.isBottomInRange()) {
                waitForReleased = false;
            }

            if (Robot.robotSensors.isTopInRange()) {
                return true;
            }
            return false;
        }

        else {

            if (Robot.robotSensors.isBottomInRange()) {
                return true;
            }
            else if (Robot.robotSensors.isTopInRange()) {
                return true;
            }
            else {
                return false;
            }
        }

        /*
        if (firstTime) {
            firstTime = false;
            SmartDashboard.putString("Debug Message","First Time -- pass");
            return false;
        }
        else if (Robot.robotSensors.isBottomInRange()) {
            SmartDashboard.putString("Debug Message", "Bottom In Range True");
            return true;
        }
        else if (Robot.robotSensors.isTopInRange()) {                                   // MEW 20200213 -- Add code to prevent jamming at the indexer!
            SmartDashboard.putString("Debug Message", "Top In Range True");
            return true;
        }
        else {
            SmartDashboard.putString("Debug Message", "Bottom In Range False");
            return false;
        }
        */
    }
    

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.conveyor.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
