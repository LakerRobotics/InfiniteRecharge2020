// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// *****************************************************************************
// * 2020 Infinite Recharge
// *
// * 25 points are awarded for each robot hanging from the switch at the end
// * of the match. If your switch is level 5 seconds after the match ends, your
// * alliance earns an additional 15 points.  If your alliance has a total 
// * greater than 65 points or more -- 2 robots hanging level, or 3 robots 
// * hanging, you earn a ranking point.
// *
// * The hanging mechanism is controlled by a single NEO Brushless motor with 
// * an integral encoder and an external limit switch that is attached via 
// * breakout board to the Spark MAX controller.  
// * 
// * NOTE: The Spark MAX controller is sensitive to the PDP having a sticky 
// * fault (flashing yellow lights).  This has occurred twice in a week.  We 
// * need to determine if there is a problem with the PDP or if this is normal 
// * and we simply need to clear these faults programmatically when they occur.
// *
// * Since the robot must continue to hang with no power for 5 seconds after 
// * the match, a ratchet is attached to the output shaft of the motor.  
// * THIS MEANS:
// *    •	That the motor can RUN IN ONLY ONE DIRECTION, 
// *    •	that the drive team has ONE chance to hang, and
// *    •	that the pit crew must FOLLOW A PROCEDURE to prepare the hanger 
// *        for the next match.
// *
// * On the operator controller, a button will be available to control the hanger.  
// * So long as the button is held, the hanger motor will move (either extending 
// * or retracting the hook depending on where the hook is in its travel).  When 
// * the bottom of the hook rod contacts the limit switch, the motor will stop.
// * 
// *****************************************************************************

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import com.ctre.phoenix.motorcontrol.ControlMode;
import frc.robot.Robot;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANError;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Hanger extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax hangerSpark;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Hanger() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
hangerSpark = new CANSparkMax(30, MotorType.kBrushless);

hangerSpark.restoreFactoryDefaults();  
hangerSpark.setInverted(false);
hangerSpark.setIdleMode(IdleMode.kCoast);
  
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void stop() {
        hangerSpark.stopMotor();
    }

    public void move(double speed) {
        hangerSpark.set(speed);
    }

    public void reset(double speed) {
        hangerSpark.set(-speed);
    }

}

